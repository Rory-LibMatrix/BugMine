@page "/Projects/{ProjectSlug}/"
@using System.Collections.Frozen
@using System.Reflection
@using ArcaneLibs.Extensions
@using BugMine.Sdk.Events.Timeline
@using BugMine.Web.Pages.Projects.Issues
@using BugMine.Web.Components.ScopedContainers
@using LibMatrix

<ProgressLog ></ProgressLog>

<ProjectContainer ProjectSlug="@ProjectSlug" ProjectContext="@ProjectContext" Loaded="@OnProjectLoaded">
    <h3>@ProjectContext!.Project!.Info.Name</h3>
    <p>@Followers.Count followers - @Issues?.Count issues</p>
    <LinkButton href="@(typeof(NewIssue).GetCustomAttributes<RouteAttribute>().First().Template.Replace("{ProjectSlug}", ProjectSlug))">New issue</LinkButton>
    @if (Progress == Status.Loading) {
        <p>Loading issues, got @(Issues?.Count ?? 0) so far... <SimpleSpinner/></p>
    }

    @* <p>@Project.Description</p> *@
    @if (Issues != null) {
        @foreach (var issue in Issues) {
            var issueData = issue.Data.TypedContent as BugMineIssueData;
            <div class="issue-card" @onclick="@(() => { NavigationManager.NavigateTo(GetIssueUrl(issue)); })">
                <div style="width: 1em; height: 1em; background-color: #00FF00; display: inline-block;"></div> @* Color based on tags... *@
                <p>@issueData.Name</p>
            </div>
        }
    }
</ProjectContainer>

@code {
    private Status? _progress = Status.Loading;

    public ProjectContainer.ProjectContainerContext? ProjectContext { get; set; } = new();

    [Parameter]
    public string ProjectSlug { get; set; } = null!;

    private List<BugMineIssue>? Issues { get; set; }
    private FrozenSet<StateEventResponse> Followers { get; set; } = FrozenSet<StateEventResponse>.Empty;

    private Status? Progress {
        get => _progress;
        set {
            _progress = value;
            StateHasChanged();
        }
    }

    protected async Task OnProjectLoaded() {
        Progress = Status.Loading;
        ProjectContext!.Project!.Room.GetMembersListAsync().ContinueWith(x => {
            Followers = x.Result;
            StateHasChanged();
        });
        await foreach (var issue in ProjectContext.Project.GetIssues(chunkLimit: 1000)) {
            Issues ??= new List<BugMineIssue>();
            Issues.Add(issue);
            // StateHasChanged();
            if (Issues.Count % 1000 == 0) {
                StateHasChanged();
                Console.WriteLine($"Got issue {Issues.Count} {issue.Data.RawContent.ToJson()}");
            }
        }

        Progress = Status.Done;

        StateHasChanged();
    }

    private enum Status {
        Loading,
        Done
    }

    private string GetIssueUrl(BugMineIssue issue) =>
        typeof(ViewIssue).GetCustomAttributes<RouteAttribute>().First().Template
            .Replace("{ProjectSlug}", ProjectSlug)
            .Replace("{IssueId}", issue.Data.EventId);

}